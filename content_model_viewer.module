<?php

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */
module_load_include('inc', 'content_model_viewer', 'content_model_viewer.db'); // Helper functions/constants for database.
include_once drupal_get_path('module', 'content_model_viewer') . '/content_model_viewer_publish.inc';
include_once drupal_get_path('module', 'content_model_viewer') . '/content_model_viewer_manage.inc';
include_once drupal_get_path('module', 'content_model_viewer') . '/content_model_viewer_delete.inc';

/**
 * Constants
 */
define("PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS", 'View Objects & Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES", 'Modify Object Properties');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS", 'Purge Objects');
define("PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS", 'Add Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS", 'Purge Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS", 'Download Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTREAM_PROPERTIES", 'Modify Datastream Properties');
define("PERM_CONTENT_MODEL_VIEWER_PUBLISH_DATASTREAM_PROPERTIES", 'Publish Datastream'); //SFOX DTC-148
define("PERM_CONTENT_MODEL_VIEWER_REPOSITORY_MANAGER", 'Repository Manager'); //SFOX DTC-163
define("PERM_CONTENT_MODEL_VIEWER_MANAGE_FILES_PROPERTIES", 'Add Uploaded Files');
define("PERM_CONTENT_MODEL_VIEWER_DELETE_FILES_PROPERTIES", 'Delete Uploaded Files');

/**
 * Implements Menu Hook. Registers Menus.
 */
function content_model_viewer_menu() {
  $items['viewer/%'] = array(
    'title' => t('Content Model Viewer'),
    'description' => t('Allows users to view Fedora Objects.'),
    'page callback' => 'content_model_viewer',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['viewer/iframe'] = array(
    'page callback' => 'content_model_viewer_iframe',
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/members'] = array(
    'page callback' => 'content_model_viewer_members',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/treemembers'] = array(
    'page callback' => 'content_model_viewer_treemembers',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/treemember'] = array(
    'page callback' => 'content_model_viewer_treemember',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/properties'] = array(
    'page callback' => 'content_model_viewer_properties',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams'] = array(
    'page callback' => 'content_model_viewer_datastreams',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams/%'] = array(
    'page callback' => 'content_model_viewer_datastreams',
    'page arguments' => array(1, 3),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/overview'] = array(
    'page callback' => 'content_model_viewer_overview',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/permission_form'] = array(
    'page callback' => 'content_model_viewer_permission_form',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTREAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/metadata_form'] = array(
    'page callback' => 'content_model_viewer_metadata_form',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTREAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/metadata_form'] = array(
    'page callback' => 'content_model_viewer_metadata_form',
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTREAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  //SFOX DTC-148
  $items['viewer/%/publish_form'] = array(
    'page callback' => 'content_model_viewer_publish_form',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PUBLISH_DATASTREAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  //SFOX DTC-148
  $items['viewer/publish_form'] = array(
    'page callback' => 'content_model_viewer_publish_dataset_form',
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PUBLISH_DATASTREAM_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/manage_form'] = array(
    'page callback' => 'content_model_viewer_manage_form',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MANAGE_FILES_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/delete_form'] = array(
    'page callback' => 'content_model_viewer_delete_form',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_DELETE_FILES_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/source/%/dest/%/move/%'] = array(
    'page callback' => 'content_model_viewer_move_object',
    'page arguments' => array(2, 4, 6),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/associate/%'] = array(
    'page callback' => 'content_model_viewer_associate_object',
    'page arguments' => array(1, 3),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_object',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/item_information/%'] = array(
    'page callback' => 'content_model_viewer_item_information',
    'page arguments' => array(1, 3),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/wizard_step/%'] = array(
    'page callback' => 'content_model_viewer_wizard_step',
    'page arguments' => array(1, 3),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/add_form/%'] = array(
    'page callback' => 'content_model_viewer_add_object',
    'page arguments' => array(1, 3),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/collection/remove/%'] = array(
    'page callback' => 'content_model_viewer_remove_from_collection',
    'page arguments' => array(1, 4, 5),
    'access arguments' => array('edit fedora meta data'),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/add'] = array(
    'page callback' => 'content_model_viewer_add_datastream',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/download'] = array(
    'page callback' => 'content_model_viewer_download_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/view'] = array(
    'page callback' => 'content_model_viewer_view_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );

  $items['viewer/upload/%'] = array(
    'page callback' => 'content_model_viewer_upload',
    'page arguments' => array(2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/content_model_viewer'] = array(
    'title' => t('Content Model Viewer Settings'),
    'description' => t('Settings for the Content Model Viewer.'),
    'page callback' => 'theme',
    'page arguments' => array('content_model_viewer_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'content_model_viewer.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/content_model_viewer/%/edit'] = array(
    'title' => t('Content Model Viewer Settings'),
    'description' => t('Settings for the Contet Model Viewer.'),
    'file' => 'content_model_viewer.admin.inc',
    'page callback' => 'theme',
    'page arguments' => array('content_model_viewer_custom_settings', 3),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/content_model_viewer/form/autocomplete/models'] = array(
    'page callback' => 'content_model_viewer_autocomplete_models',
    'access arguments' => array('administer site configuration'),
    'file' => 'content_model_viewer.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function content_model_viewer_upload($form_id) {
  //upload for plupload
  // Make sure file is not cached (as it happens for example on iOS devices)
  header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
  header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
  header("Cache-Control: no-store, no-cache, must-revalidate");
  header("Cache-Control: post-check=0, pre-check=0", false);
  header("Pragma: no-cache");

  /*
    // Support CORS
    header("Access-Control-Allow-Origin: *");
    // other CORS headers if any...
    if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
    exit; // finish preflight CORS requests here
    }
   */

  // 5 minutes execution time
  @set_time_limit(5 * 60);

  // Uncomment this one to fake upload time
  // usleep(5000);
  // Settings
  $targetDir = file_directory_temp();
  //$targetDir = 'uploads';
  $cleanupTargetDir = false; // Remove old files
  $maxFileAge = 5 * 3600; // Temp file age in seconds
  // Create target dir
  if (!file_exists($targetDir)) {
    @mkdir($targetDir);
  }

  // Get a file name
  $file_info = new stdClass();

  if (isset($_REQUEST["name"])) {
  //	$fileName = $_REQUEST["name"];
    $file_info->filename = $_REQUEST["name"];
  }
  elseif (!empty($_FILES)) {
    $file_info->filename = $_FILES["file"]["name"];
  }


  $fileName = uniqid("file_") . $file_info->filename;
  /*
    print '----Session----';
    print_r($_SESSION);
    print '----Session END----';
    global $base_path;
    print $base_path;
   */
  $filePath = $targetDir . DIRECTORY_SEPARATOR . $fileName;
  $file_info->filepath = $filePath; //$base_path . 'sites/all' .$filePath;
  $_SESSION['file_uploads'][$form_id][] = $file_info;
  $_SESSION['sidora_file_sessionid'] = $form_id;
  // Chunking might be enabled
  $chunk = isset($_REQUEST["chunk"]) ? intval($_REQUEST["chunk"]) : 0;
  $chunks = isset($_REQUEST["chunks"]) ? intval($_REQUEST["chunks"]) : 0;

  // Open temp file
  if (!$out = @fopen("{$filePath}.part", $chunks ? "ab" : "wb")) {
    die('{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}');
  }

  if (!empty($_FILES)) {
    if ($_FILES["file"]["error"] || !is_uploaded_file($_FILES["file"]["tmp_name"])) {
      die('{"jsonrpc" : "2.0", "error" : {"code": 103, "message": "Failed to move uploaded file."}, "id" : "id"}');
    }

    // Read binary input stream and append it to temp file
    if (!$in = @fopen($_FILES["file"]["tmp_name"], "rb")) {
      die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
    }
  }
  else {
    if (!$in = @fopen("php://input", "rb")) {
      die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
    }
  }

  while ($buff = fread($in, 4096)) {
    fwrite($out, $buff);
  }

  @fclose($out);
  @fclose($in);






// Check if file has been uploaded
  if (!$chunks || $chunk == $chunks - 1) {
    // Strip the temp .part suffix off
    rename("{$filePath}.part", $filePath);
  }

// Return Success JSON-RPC response
//print_r ($_SESSION['file_uploads']);
//die('{"jsonrpc" : "2.0", "result" : null, "id" : "id"}');
  print 'upload complete';

  exit();
}

/**
 * Implements hook_menu_alter().
 *
 * @param array $items
 */
function content_model_viewer_menu_alter(&$items) {
  $items['fedora']['page callback'] = 'content_model_viewer';
  $items['fedora/repository']['page callback'] = 'content_model_viewer';
}

/**
 * Implements hook_perm. Register permissions.
 *
 * @return array
 */
function content_model_viewer_perm() {
  return array(
    PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTREAM_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PUBLISH_DATASTREAM_PROPERTIES, //DTC-148
    PERM_CONTENT_MODEL_VIEWER_REPOSITORY_MANAGER, //SFOX DTC-163
    PERM_CONTENT_MODEL_VIEWER_MANAGE_FILES_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_DELETE_FILES_PROPERTIES,
  );
}

/**
 * Implements Hook Theme. Registers themes.
 *
 * @return array
 */
function content_model_viewer_theme() {
  return array(
    'content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'ViewerIFrame',
    ),
    'content_model_viewer_iframe' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'IFrame',
    ),
    'content_model_viewer_metadata_form' => array(
      'arguments' => array('wrapper_id' => NULL, 'pid' => NULL, 'action' => NULL),
      'template' => 'Form',
    ),
    'content_model_viewer_publish_form' => array(//SFOX DTC-148
      'arguments' => array('wrapper_id' => NULL, 'pid' => NULL, 'action' => NULL),
      'template' => 'Form',
    ),
    'content_model_viewer_manage_form' => array(//SFOX 
      'arguments' => array('wrapper_id' => NULL, 'pid' => NULL, 'action' => NULL),
      'template' => 'Form',
    ),
    'content_model_viewer_delete_form' => array(//SFOX 
      'arguments' => array('wrapper_id' => NULL, 'pid' => NULL, 'action' => NULL),
      'template' => 'Form',
    ),
    'content_model_viewer_settings' => array(
      'template' => 'templates/Settings',
      'file' => 'content_model_viewer.admin.inc',
    ),
    'content_model_viewer_custom_settings' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'templates/CustomSettings',
      'file' => 'content_model_viewer.admin.inc',
    ),
    'default_content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'file' => 'models/Default.inc',
      'template' => 'models/Default',
    ),
    'field_book_content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'models/Default',
    ),
    'plupload' => array(
      'arguments' => array('pid' => NULL),
    ),
    'content_model_viewer_form_table' => array(
      'arguments' => array('element' => NULL)
    )
  );
}

function theme_plupload($elements) {
  ob_start();


  print '
<div id="edit-0-wrapper">
<div id="filelist" ></div>
<br />
<!--';
//print_r($elements);
//print implode(",",$elements['#extensions']);
  print '-->
<div id="container" class="-uploader">
    <button class="islandora-repo-button" id="pickfiles" href="javascript:;">Upload Files</button> 
    <a id="uploadfiles" style="display:none;" href="javascript:;">[Upload files]</a>
</div>

<br />
<pre id="console"></pre>
</div>

<script type="text/javascript" src="';
  print $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'content_model_viewer');
  print '/plupload-2.1.2/js/plupload.full.min.js"></script>

<script type="text/javascript">
function loadjscssfile(filename, filetype){
 if (filetype=="js"){ //if filename is a external JavaScript file
  var fileref=document.createElement("script")
  fileref.setAttribute("type","text/javascript")
  fileref.setAttribute("src", filename)
 }
 else if (filetype=="css"){ //if filename is an external CSS file
  var fileref=document.createElement("link")
  fileref.setAttribute("rel", "stylesheet")
  fileref.setAttribute("type", "text/css")
  fileref.setAttribute("href", filename)
 }
 if (typeof fileref!="undefined")
  document.getElementsByTagName("head")[0].appendChild(fileref)
}

window.uploader = new plupload.Uploader({
	runtimes : "html5,flash,silverlight,html4",
	browse_button : "pickfiles", // you can pass in id...
	container: document.getElementById("container"), // ... or DOM Element itself
	url : "';
  print base_path();
  if ($elements['#form_build_id']) {
    $formbuildid = $elements['#form_build_id'];
    print 'viewer/upload/' . $formbuildid . '", flash_swf_url : "';
  }
  else {
    print 'viewer/upload/"+jQuery("#content-model-viewer-ingest-resource-metadata-form").find("input[name=form_build_id]").val(),
  flash_swf_url : "';
  }
  print base_path();
  print 'sites/all/modules/islandora_content_model_viewer/plupload-2.1.2/js/Moxie.swf",
	silverlight_xap_url : "';
  print base_path();
  print 'sites/all/modules/islandora_content_model_viewer/plupload-2.1.2/js/Moxie.xap",
	
	filters : {
		max_file_size : "1000mb",
		mime_types: [
			{title : "';
  print implode(",", $elements['#extensions']) . ' files';
  print '", extensions : "';
  print implode(",", $elements['#extensions']);
  print '"}
		]
	},

	init: {
		PostInit: function() {
			document.getElementById("filelist").innerHTML = "";

			document.getElementById("uploadfiles").onclick = function() {
				uploader.start();
				return false;
			};
		},

		FilesAdded: function(up, files) {
			plupload.each(files, function(file) {
                           //alert(file.id+" "+file.name+" "+file.size);
                           var item = jQuery("<div></div>");
                           item.attr("id",file.id);
                           item.html(file.name + "(" + plupload.formatSize(file.size) + ")<b></b>");
                           jQuery("#filelist").append(item);
			});
			uploader.start();
		},

		UploadProgress: function(up, file) {
			document.getElementById(file.id).getElementsByTagName("b")[0].innerHTML = "<span>" + file.percent + "%</span>";
		},

		Error: function(up, err) {
			document.getElementById("console").innerHTML += "\n" + err.file.name + ": " + err.message;
			if (err.code == -601) document.getElementById("console").innerHTML += "  Usable extensions are:';
  print implode(",", $elements['#extensions']);
  print '";
		}
	}
});

uploader.init();
</script>

';
  $result = ob_get_clean();
  return $result;
}

/**
 * 'content_model_datastream_viewers' Hook implementation.
 *
 * Lists all the datastream viewers
 */
function content_model_viewer_content_model_datastream_viewers() {
  /**
   * @todo make is so that no Classes need to be created and all the information is included
   * in this array...
   */
  $flexpaper = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/FlexPaper',
    'class' => 'FlexPaperViewer',
  );
  $xml = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/XML',
    'class' => 'XMLDatastreamViewer',
  );
  $image_basic = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/BasicImageViewer',
    'class' => 'BasicImageViewer',
  );
  $image_djatoka = array(// Adore Djatoka is required. Should check the content model for service def or something.
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/Djatoka',
    'class' => 'DjatokaViewer',
  );
  return array(
    'application/x-shockwave-flash' => $flexpaper,
    'application/shockwave-flash' => $flexpaper,
    'text/xml' => $xml,
    'application/rdf+xml' => $xml,
    'image/jpeg' => $image_basic,
    'image/gif' => $image_basic,
    'image/jp2' => $image_basic,
    'image/jpg' => $image_basic,
    'image/png' => $image_basic,
    'image/raw' => $image_basic,
    'image/tiff' => $image_basic,
    'image/tif' => $image_basic,
  );
}

/**
 * Loads all the installed module classes.
 */
function content_model_viewer_include_content_models() {
  $include_path = drupal_get_path('module', 'content_model_viewer') . "/models";
  $dir = opendir($include_path);
  if ($dir !== FALSE) {
    while (($file = readdir($dir)) !== FALSE) {
      if (preg_match('/\.inc$/', $file)) {
        require_once "$include_path/$file";
      }
    }
  }
  closedir($dir);
}

/**
 * Get the list of installed ContentModelViewer classes.
 */
function content_model_viewer_get_models() {
  $models = array();
  $classes = get_declared_classes();
  foreach ($classes as $class) {
    if ($class instanceof ContentModelViewer) {
      $models[] = $class;
    }
  }
  return $models;
}

/**
 * Loads all the installed viewer classes.
 */
function content_model_viewer_include_viewers() {
  $include_path = drupal_get_path('module', 'content_model_viewer') . "/viewers";
  $dir = opendir($include_path);
  if ($dir !== FALSE) {
    while (($file = readdir($dir)) !== FALSE) {
      if (preg_match('/\.inc$/', $file)) {
        require_once "$include_path/$file";
      }
    }
  }
  closedir($dir);
}

/**
 * Hook for register_content_models_for_viewer
 *
 * @return array
 */
function content_model_viewer_register_content_models_for_viewer() {
  $models = array();
  $models['si:fieldbooks'] = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'FieldBooks',
    'class' => 'FieldBookModelViewer'
  );
  return $models;
}

/**
 * Gets an instance of a content model viewer.
 *
 * @param string $pid
 *
 * @return object
 *   An instance of the Content Model Viewer if found. Otherwise it returns
 *   the default content model viewer.
 */
function content_model_viewer_get_registered_content_model_viewer($pid) {
  if (($model_pid = content_model_viewer_get_content_model_pid($pid)) != FALSE) {
    $models = module_invoke_all('register_content_models_for_viewer');
    foreach ($models as $key => $model) {
      if ($key == $model_pid) {
        module_load_include($model['type'], $model['module'], $model['file']);
        $class = $model['class'];
        return new $class($pid);
      }
    }
  }
  module_load_include('inc', 'content_model_viewer', 'models/Default');
  // Default Display
  $model = module_invoke_all('register_default_content_model_for_viewer');
  if (!empty($model)) { // If more than one is defined used the last one, ideally this would be exposed via a settings menu and one would be selected.
    $model = array_pop($model); // Last model
    module_load_include($model['type'], $model['module'], $model['file']);
    $class = $model['class'];
    return new $class($pid);
  }
  else {
    return new DefaultModelViewer($pid);
  }
}

/**
 * Get the pid of this objects content model.
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_get_content_model_pid($pid) {
  module_load_include('inc', 'fedora_repository', 'ContentModel');
  $content_model = ContentModel::loadFromObject($pid);
  return $content_model ? $content_model->pid : FALSE;
}

/**
 * Gets the Supported Viewers.
 *
 * @staticvar array $cache
 * @return array
 */
function content_model_viewer_get_supported_viewers() {
  static $cache;
  if (!isset($cache)) {
    $cache = array();
    foreach (module_implements('content_model_datastream_viewers') as $module) {
      $viewers = module_invoke($module, 'content_model_datastream_viewers');
      if (isset($viewers) && is_array($viewers)) {
        $cache = array_merge_recursive($cache, $viewers);
      }
    }
  }
  return $cache;
}

/**
 * Looks for a supported viewer that can view the given MIME type, and gets the viewer properties.
 *
 * @param string $mime
 *   A valid MIME Type.
 *
 * @return array
 *   The properties of the viewer if found, NULL otherwise. The format of the properties is defined by the
 *   content_model_datastream_viewers hook.
 */
function content_model_viewer_get_viewer_properties($mime) {
  $viewers = content_model_viewer_get_supported_viewers();
  foreach ($viewers as $supported_mime_type => $properties) {
    if ($supported_mime_type == $mime) { // @todo make both lower case.
      return $properties;
    }
  }
  return NULL;
}

function content_model_viewer_grab_js() {
  /**
   * Grab the scripts and run jquery replace code to use the latest jquery js.
   */
  $scripts = drupal_add_js();
  // Replace jquery.js first.
  $new_jquery = array(jquery_update_jquery_path() => $scripts['core']['misc/jquery.js']);
  $scripts['core'] = array_merge($new_jquery, $scripts['core']);
  unset($scripts['core']['misc/jquery.js']);
  // Loop through each of the required replacements.
  foreach (jquery_update_get_replacements() as $type => $replacements) {
    foreach ($replacements as $find => $replace) {
      // If the file to replace is loaded on this page...
      if (isset($scripts[$type][$find])) {
        // Create a new entry for the replacement file, and unset the original one.
        $replace = JQUERY_UPDATE_REPLACE_PATH . '/' . $replace;
        $scripts[$type][$replace] = $scripts[$type][$find];
        unset($scripts[$type][$find]);
      }
    }
  }
  return $scripts;
}

function content_model_viewer_grab_css() {
  $css = drupal_add_css();
  $css_path = drupal_get_path('module', 'content_model_viewer') . '/css';
  $replace = array(
    'system/defaults.css' => $css_path . '/defaults.css',
    'system/system.css' => $css_path . '/system.css',
    'system/system-menus.css' => FALSE,
    'system/user.css' => FALSE
  );
  foreach ($css['all'] as $group => &$styles) {
    foreach ($styles as $style => $bool) {
      if (strpos($style, 'themes/')) { // Ignore the global themes
        unset($styles[$style]);
      }
      $filename = substr($style, strpos($style, 'modules/') + strlen('modules/'));
      if (isset($replace[$filename])) {
        if ($replace[$filename] !== FALSE) {
          $position = array_search($style, array_keys($styles));
          $styles = content_model_viewer_array_insert($styles, array($replace[$filename] => TRUE), $position);
          unset($styles[$style]);
          for ($i = 0; $i <= $position; $i++) {
            next($styles);
          }
        }
        else {
          unset($styles[$style]);
        }
      }
    }
  }
  return $css;
}

function content_model_viewer_array_insert($arr, $insert, $position) {
  foreach ($arr as $key => $value) {
    if ($i == $position) {
      foreach ($insert as $ikey => $ivalue) {
        $ret[$ikey] = $ivalue;
      }
    }
    $ret[$key] = $value;
    $i++;
  }
  return $ret;
}

/**
 * Sets up variables for the template.
 *
 * @param array $variables
 */
function template_preprocess_content_model_viewer_iframe(array &$variables) {
  global $base_url;
  global $user;
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'content_model_viewer', 'Collection');
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $variables['scripts'] = drupal_get_js('header', content_model_viewer_grab_js());
  $variables['styles'] = drupal_get_css(content_model_viewer_grab_css());
  $pid = $variables['pid'];

  if (isset($pid)) {
    $item = new Fedora_Item($pid);
    if ($item->exists()) {
      $variables['label'] = $item->objectProfile->objLabel;
      $variables['is_collection'] = Collection::isCollection($pid) ? 'true' : 'false';
    }
    else {
      $variables['pid'] = $variables['label'] = '';
      $variables['is_collection'] = 'false';
    }
  }
  else {
    $variables['pid'] = $variables['label'] = '';
    $variables['is_collection'] = 'false';
  }
  $user_data = unserialize($user->data);
  $user_pid = $user_data['islandora_user_pid'];

  if (in_array('administrator', $user->roles)) {
    $root = variable_get('fedora_repository_pid', 'islandora:root');
    $pid = $user_pid;
  }
  else {
    $serialized_data = unserialize($user->data);
    //SFOX DTC-163 Repository managers should be able to see all user's objects
    if (in_array('FBA Sidora Repository Manager', $user->roles)) {
      $root = 'fba:user-projects';
    }
    else {
      $root = $serialized_data['islandora_user_pid'];
    } //SFOX DTC-163
  }

  if ($user_pid) {
    $itql_query = 'select $object $title
      count(select $pid from <#ri> where ($object <fedora-model:hasModel> $sub_model
       and $sub_model <fedora-model:hasModel> $sub_parent_model
       and $sub_parent_model <mulgara:is> <info:fedora/islandora:collectionCModel>
       and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
       and $pid <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
       and $pid <fedora-model:hasModel> $child_model
       and ($pid <fedora-rels-ext:isMemberOfCollection> $object or $pid <fedora-rels-ext:isMemberOf> $object))
       minus $child_model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
      )
      from <#ri> where ($object <info:fedora/fedora-system:def/model#label> $title
       and $object <mulgara:is> <info:fedora/' . $user_pid . '>)';
    $collectionClass = new CollectionClass();
    $query_results = $collectionClass->getRelatedItems(NULL, $itql_query);
    $xml_set = simplexml_load_string($query_results);
    $result = $xml_set->results->result[0];
    $variables['rootowner'] = $result->title;
    $variables['si_user'] = $user_pid;
  }
  else {
    $variables['rootowner'] = $user->name;
  }

  $variables['root'] = $root;
  $variables['base_url'] = $base_url;
  $variables['dsid'] = 'SWF'; // Default viewer.
  $variables['view_function'] = 'loadFlexPlayer';
  $variables['paths'] = array(
    'object' => array(
      'overview' => "viewer/pid/overview",
      'properties' => "viewer/pid/properties",
      'datastreams' => "viewer/pid/datastreams",
      'permission_form' => "viewer/pid/permission_form",
      'metadata_form' => "viewer/pid/metadata_form",
      'publish_form' => "viewer/pid/publish_form", //SFOX DTC-148
      'manage_form' => "viewer/pid/manage_form",
      'delete_form' => "viewer/pid/delete_form",
      'remove_relationship' => "viewer/pid/collection/remove/dsid", // Hack the dsid will be a pid actually
      'members' => "viewer/pid/members",
      'treemembers' => "viewer/pid/treemembers",
      'treemember' => "viewer/pid/treemember",
      'purge' => "viewer/pid/purge",
      'add' => "viewer/pid/add_form/dsid"
    ),
    'datastream' => array(
      'add' => "viewer/pid/add",
      'purge' => "viewer/pid/dsid/purge",
      'properties' => "viewer/pid/dsid/properties",
      'download' => "viewer/pid/dsid/download",
      'view' => "viewer/pid/dsid/view"
    )
  );
}

/**
 * Renders the Viewer for a given pid if possible.
 *
 * @param string $pid
 */
function content_model_viewer($pid = NULL) {
  global $user;
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  // Copied from islandora.
  if (!fedora_available()) {
    drupal_set_message(t('The Fedora repository server is currently unavailable. Please contact the site administrator.'), 'warning', FALSE);
    return '';
  }
  if (function_exists('risearch_available') && !risearch_available()) {
    drupal_set_message(t('The Fedora resource index search is currently unavailable. Please contact the site administrator.'), 'warning', FALSE);
    return '';
  }
  if ($pid !== NULL) {
    if (strpos($pid, ':') === false) {
      watchdog("CMV", "Content Model Viewer:No info,bad pid---" . $pid . "---");
      $pid = NULL;
    }
    else {
      $item = new fedora_item($pid);
      if (!$item->exists()) {
        $pid = NULL;
      }
    }
  }
  return theme('content_model_viewer', $pid);
  /*
    $path = drupal_get_path('module', 'content_model_viewer');
    $js_path = $path . '/js';
    if (isset($_POST['action'])) { // Render Metadata Form
    $action = $_POST['action'];
    return theme('content_model_viewer_metadata_form', $pid, $action);
    }
    else {
    /* Load ExtJS
    module_load_include('inc', 'extjs', 'extjs.utils');
    extjs_add_js_file('ext-all');
    extjs_add_css_file('ext-all');
    //drupal_add_css($path . '/css/Clear.css');
    //drupal_add_css($path . '/lib/ext/resources/css/ext-all-gray.css', 'theme', 'all');
    /* Load Panels/Widgets /
    drupal_add_js($js_path . '/IncludeFirst.js');
    drupal_add_js($js_path . '/SortButton.js');
    drupal_add_js($js_path . '/DatastreamViewerPanel.js');
    drupal_add_js($js_path . '/FilesPanel.js');
    drupal_add_js($js_path . '/OverviewPanel.js');
    drupal_add_js($js_path . '/ViewerPanel.js');
    $manage_permissions = array(
    PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTREAM_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PUBLISH_DATASTREAM_PROPERTIES //SFOX DTC-148
    PERM_CONTENT_MODEL_VIEWER_REPOSITORY_MANAGER //SFOX DTC-163

    );
    $show_manage_panel = false;
    foreach ($manage_permissions as $permission) {
    if (user_access($permission)) {
    $show_manage_panel = true;
    }
    }
    if ($show_manage_panel) {
    drupal_add_js($js_path . '/ObjectPropertiesPanel.js');
    drupal_add_js($js_path . '/DatastreamPropertiesPanel.js');
    drupal_add_js($js_path . '/ManagePanel.js');
    }
    drupal_add_js($js_path . '/CollectionPanel.js');
    drupal_add_js($js_path . '/TreePanel.js');
    drupal_add_js($js_path . '/ContentModelViewer.js');
    drupal_add_css($path . '/css/ContentModelViewer.css');
    /* Load Viewers /
    module_load_include('inc', 'content_model_viewer', 'viewers/AbstractViewer');
    module_load_include('inc', 'content_model_viewer', 'models/AbstractModel');
    AbstractViewer::LoadRequiredResourcesForAllViewers();
    AbstractModel::LoadRequiredResourcesFor($pid);
    return theme('content_model_viewer', $pid);
    } */
}

function content_model_viewer_iframe($pid = NULL) {
  $path = drupal_get_path('module', 'content_model_viewer');
  $js_path = $path . '/js';
  module_load_include('inc', 'extjs', 'extjs.utils');
  extjs_add_css_file('ext-all-gray');
  extjs_add_all();
  //SFOX extracted next lines from extjs_add_all function, and changed defer from TRUE to FALSE
  $file = 'ext-all';
  $path = extjs_get_js_path();
  drupal_add_js($path . '/' . $file . extjs_get_js_file_suffix(), 'module', 'header', FALSE);
  drupal_add_css(drupal_get_path('module', 'sidora') . '/css/smith.css', 'theme'); // God awful hack
  drupal_add_css(drupal_get_path('module', 'sidora') . '/css/fba.css', 'theme'); // God awful hack, borrowed for fba customisation
  /* Load Panels/Widgets */
  drupal_add_js($js_path . '/json2.js'); // Deal with IE problems
  drupal_add_js($js_path . '/IncludeFirst.js');
  drupal_add_js($js_path . '/SortButton.js');
  drupal_add_js($js_path . '/DatastreamViewerPanel.js');
  //DTC-199 drupal_add_js($js_path . '/FilesPanel.js');
  drupal_add_js($js_path . '/OverviewPanel.js');
  drupal_add_js($js_path . '/ViewerPanel.js');
  $manage_permissions = array(
    PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTREAM_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PUBLISH_DATASTREAM_PROPERTIES, //SFOX DTC-148
    PERM_CONTENT_MODEL_VIEWER_REPOSITORY_MANAGER, //SFOX DTC-163
    PERM_CONTENT_MODEL_VIEWER_MANAGE_FILES_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_DELETE_FILES_PROPERTIES,
  );

  $show_manage_panel = FALSE;
  //SFOX DTC 162,the manage tab is only shown for administrator
  global $user;
  if ($user->uid == 1) {
    foreach ($manage_permissions as $permission) {
      if (user_access($permission)) {
        $show_manage_panel = TRUE;
      }
    }
  }//SFOX DTC 162
  if ($show_manage_panel) {
    drupal_add_js($js_path . '/ObjectPropertiesPanel.js');
    drupal_add_js($js_path . '/DatastreamPropertiesPanel.js');
    drupal_add_js($js_path . '/ManagePanel.js');
  }
  drupal_add_js($js_path . '/CollectionPanel.js');
  drupal_add_js($js_path . '/TreePanel.js');
  drupal_add_js($js_path . '/ContentModelViewer.js');
//SFOX Disable drag n drop for now
//  drupal_add_js($js_path . '/extjs_plugins/ux/DataView/DragSelector.js');
//  drupal_add_js($js_path . '/extjs_plugins/ux/DataView/Draggable.js');
  drupal_add_css($path . '/css/ContentModelViewer.css');
  //Going to be disabling this InitialDisplay via javascript, so don't aggregate it */
  drupal_add_css($path . '/css/ContentModelViewerInitialDisplay.css', 'module', 'all', FALSE);
  /* Load Viewers */
  module_load_include('inc', 'content_model_viewer', 'viewers/AbstractViewer');
  module_load_include('inc', 'content_model_viewer', 'models/AbstractModel');
  AbstractViewer::LoadRequiredResourcesForAllViewers();
  AbstractModel::LoadRequiredResourcesFor($pid ? $pid : variable_get('fedora_repository_pid', 'islandora:root'));
  echo theme('content_model_viewer_iframe', $pid);
  exit();
}

/**
 * Returns the HTML for overview panel in the viewer.
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_overview($pid) {
  $viewer = content_model_viewer_get_registered_content_model_viewer($pid);
  try {
    AbstractModel::LoadRequiredResourcesFor($pid);
    $data = $viewer->render();
    $func = $viewer->getInitializationFunction();
    $javascript = drupal_add_js(NULL, NULL, 'header');
    $settings = $javascript['setting'];
    if (isset($settings)) {
      $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
      unset($settings['ahah']['']);
    }
    $js = $javascript['module'];
    $query_string = '?' . substr(variable_get('css_js_query_string', '0'), 0, 1);
    $js_files = array();
    foreach ($js as $path => $properties) {
      $js_files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?' . time());
    }
    $css_files = array();
    $css = content_model_viewer_grab_css();
    foreach ($css['all'] as $group) {
      foreach ($group as $path => $bool) {
        $css_files[] = base_path() . $path . $query_string;
      }
    }
    $status = theme_status_messages();
    $data = '<span class="drupal-content">' . $status . $data . '</span>';
    $refresh = NULL;
    if ($_SESSION['content_model_viewer_refresh_tree']) {
      $refresh = $_SESSION['content_model_viewer_refresh_tree']; // Yuck
      unset($_SESSION['content_model_viewer_refresh_tree']);
    }
    echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => $func, 'settings' => $settings, 'js' => $js_files, 'css' => $css_files, 'refresh' => $refresh));
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage());
  }
  exit();
}

/**
 * Show the edit permission form.
 */
function content_model_viewer_permission_form($pid) {
  $cmodels = content_model_viewer_get_cmodels($pid);
  $id = in_array('islandora:collectionCModel', $cmodels) ? 'concept-permission-form' : 'resource-permission-form';
  $form = drupal_get_form('islandora_xacml_editor_page', $pid, 'POLICY');
  $status = theme_status_messages();
  $data = "<div id='$id' class='drupal-content'>$status $form</div>";
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = $javascript['setting'];
  if (isset($settings)) {
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
  }
  $js = $javascript['module'];
  $query_string = '?' . substr(variable_get('css_js_query_string', '0'), 0, 1);
  $files = array();
  foreach ($js as $path => $properties) {
    $files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?' . time());
  }
  $css_files = array();
  $css = content_model_viewer_grab_css();
  foreach ($css['all'] as $group) {
    foreach ($group as $path => $bool) {
      $css_files[] = base_path() . $path . $query_string;
    }
  }
  header("Content-type: application/json");
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files));
  exit();
}

function content_model_viewer_get_cmodels($pid) {
  $query = 'select $object $title $model $parent_model
    from <#ri>
    where ($object <info:fedora/fedora-system:def/model#label> $title
    and $object <mulgara:is> <info:fedora/' . $pid . '>
    and $object <fedora-model:hasModel> $model
    and $model <fedora-model:hasModel> $parent_model
    and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
    minus $model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
    minus $model <mulgara:is> <info:fedora/fedora-system:ContentModel-3.0>
    minus $parent_model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
    order by $title';
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collection = new CollectionClass();
  $results = $collection->getRelatedObjects(NULL, 1000000, NULL, $query);
  $ret = array();
  if ($results != '') {
    $document = new DOMDocument();
    $document->loadXML($results);
    $path = new DOMXPath($document);
    $path->registerNamespace('sparql', 'http://www.w3.org/2001/sw/DataAccess/rf1/result');
    $results = $path->query('//sparql:result');
    $count = $results->length;
    if ($count > 0) {
      for ($i = 0; $i < $count; $i++) {
        $result = $results->item($i);
        $parent_model_pid = substr($path->query('sparql:parent_model/@uri', $result)->item(0)->value, 12); // 12 characteres in "info:fedora/"
        $ret[] = $parent_model_pid;
      }
    }
    return $ret;
  }
  return $ret;
}

function content_model_viewer_form_islandora_xacml_editor_page_alter(&$form, &$form_state) {
  $form['pid'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['storage']['object_pid']
  );
  $form['#submit'][] = 'content_model_viewer_form_islandora_xacml_editor_page_submit';
}

function content_model_viewer_form_islandora_xacml_editor_page_submit($form, &$form_state) {
  $pid = $form_state['values']['pid'];
  $form_state['redirect'] = "viewer/{$pid}/overview";
}

/**
 * Show the metadata form.
 */
function content_model_viewer_metadata_form($pid, $action = 'edit') {
  // If concept
  $cmodels = content_model_viewer_get_cmodels($pid);
  $id = in_array('islandora:collectionCModel', $cmodels) ? 'concept-metadata-form' : 'resource-metadata-form';
  $wizard_finish = $_POST['wizard_finish'];
  $_SESSION['wizard_finish'] = $wizard_finish;
  if ($_POST['wizard_check'] == TRUE && $_POST['form_id'] == 'content_model_viewer_edit_metadata_wizard_form') {
    $data = theme('content_model_viewer_metadata_form', $id, $pid, 'wizard-meta');
  }
  else {
    $data = theme('content_model_viewer_metadata_form', $id, $pid, 'edit');
  }
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = $javascript['setting'];
  if (isset($settings)) {
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
  }
  $js = $javascript['module'];
  $query_string = '?' . substr(variable_get('css_js_query_string', '0'), 0, 1);
  $files = array();
  foreach ($js as $path => $properties) {
    $files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?' . time());
  }
  $css_files = array();
  $css = content_model_viewer_grab_css();
  foreach ($css['all'] as $group) {
    foreach ($group as $path => $bool) {
      $css_files[] = base_path() . $path . $query_string;
    }
  }
  header("Content-type: application/json");
  //SFOX refresh isn't populated echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files, 'refresh' => $refresh));
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files));
  exit();
}

//SFOX DTC-148
/**
 * Show the metadata form.
 */
function content_model_viewer_publish_form($pid, $action = 'edit') {
  $cmodels = content_model_viewer_get_cmodels($pid);
  //$id = in_array('islandora:collectionCModel', $cmodels) ? 'concept-metadata-form' : 'resource-metadata-form';
  $id = 'dataset-publish-form';

  $wizard_finish = $_POST['wizard_finish'];
  $_SESSION['wizard_finish'] = $wizard_finish;
  if ($_POST['wizard_check'] == TRUE && $_POST['form_id'] == 'content_model_viewer_publish_wizard_form') {
    $data = theme('content_model_viewer_publish_form', $id, $pid, 'wizard-meta');
  }
  else {
    $data = theme('content_model_viewer_publish_form', $id, $pid, 'publish');
  }
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = $javascript['setting'];
  if (isset($settings)) {
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
  }
  $js = $javascript['module'];
  $query_string = '?' . substr(variable_get('css_js_query_string', '0'), 0, 1);
  $files = array();
  foreach ($js as $path => $properties) {
    $files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?' . time());
  }
  $css_files = array();
  $css = content_model_viewer_grab_css();
  foreach ($css['all'] as $group) {
    foreach ($group as $path => $bool) {
      $css_files[] = base_path() . $path . $query_string;
    }
  }
  header("Content-type: application/json");
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files, 'refresh' => $refresh));
  exit();
}

function content_model_viewer_manage_form($pid, $action = 'manage') {
  $cmodels = content_model_viewer_get_cmodels($pid);
  //$id = in_array('islandora:collectionCModel', $cmodels) ? 'concept-metadata-form' : 'resource-metadata-form';
  $id = 'datacomp-manage-form';

  $wizard_finish = $_POST['wizard_finish'];
  $_SESSION['wizard_finish'] = $wizard_finish;
  if ($_POST['wizard_check'] == TRUE && $_POST['form_id'] == 'content_model_viewer_manage_wizard_form') {
    $data = theme('content_model_viewer_manage_form', $id, $pid, 'wizard-meta');
  }
  else {
    $data = theme('content_model_viewer_manage_form', $id, $pid, 'manage');
  }
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = $javascript['setting'];
  if (isset($settings)) {
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
  }
  $js = $javascript['module'];
  $query_string = '?' . substr(variable_get('css_js_query_string', '0'), 0, 1);
  $files = array();
  foreach ($js as $path => $properties) {
    $files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?' . time());
  }
  $css_files = array();
  $css = content_model_viewer_grab_css();
  foreach ($css['all'] as $group) {
    foreach ($group as $path => $bool) {
      $css_files[] = base_path() . $path . $query_string;
    }
  }
  unset($_SESSION['sidora_file_sessionid']); //If no files are uploaded, this will never get initialised (and could use an old session by mistake)
  header("Content-type: application/json");
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files, 'refresh' => $refresh));
  exit();
}

function content_model_viewer_delete_form($pid, $action = 'deletefiles') {
  $cmodels = content_model_viewer_get_cmodels($pid);
  //$id = in_array('islandora:collectionCModel', $cmodels) ? 'concept-metadata-form' : 'resource-metadata-form';
  $id = 'datacomp-delete-form';

  $wizard_finish = $_POST['wizard_finish'];
  $_SESSION['wizard_finish'] = $wizard_finish;
  if ($_POST['wizard_check'] == TRUE && $_POST['form_id'] == 'content_model_viewer_delete_wizard_form') {
    $data = theme('content_model_viewer_delete_form', $id, $pid, 'wizard-meta');
  }
  else {
    $data = theme('content_model_viewer_delete_form', $id, $pid, 'deletefiles');
  }
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = $javascript['setting'];
  if (isset($settings)) {
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
  }
  $js = $javascript['module'];
  $query_string = '?' . substr(variable_get('css_js_query_string', '0'), 0, 1);
  $files = array();
  foreach ($js as $path => $properties) {
    $files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?' . time());
  }
  $css_files = array();
  $css = content_model_viewer_grab_css();
  foreach ($css['all'] as $group) {
    foreach ($group as $path => $bool) {
      $css_files[] = base_path() . $path . $query_string;
    }
  }
  header("Content-type: application/json");
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files, 'refresh' => $refresh));
  exit();
}

/**
 * Gets the members of this collection.
 *
 * @param string $pid
 */
function content_model_viewer_members($pid) {
  module_load_include('inc', 'content_model_viewer', 'Collection');
  $collection = new Collection($pid);
  list($data, $total) = $collection->getMembers();
  echo json_encode(array('success' => TRUE, 'data' => $data, 'total' => $total));
  exit();
  /**
   * Expected Data:
   *
   * 'link' => $base_url . '/viewer/' . 'coccc:1675',
   * 'label' => 'Some Colorado College Object',
   * 'description' => 'The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the',
   * 'owner' => 'fedoraAdmin',
   * 'created' => '2011-06-17T15:15:57.214Z',
   * 'modified' => '2011-07-15T19:08:16.008Z',
   * 'tn' => '/' . $module_path . '/images/collection.png',
   */
}

/**
 * Generate JSON to pass to EXT.js tree panel based on PID.
 *
 * @param string $pid
 *   The PID of the Fedora Object
 */
function content_model_viewer_treemembers($pid) {
  if (module_exists('sidora_performance_monitor')) {
    sidora_performance_monitor_start("f:content_model_viewer_treemembers");
  }
  module_load_include('inc', 'content_model_viewer', 'Tree');
  $node = isset($_GET['node']) ? $_GET['node'] : NULL;
  if (module_exists('sidora_performance_monitor')) {
    sidora_performance_monitor_start("c:get_tree");
  }
  $tree = new Tree($pid, $node);
  if (module_exists('sidora_performance_monitor')) {
    sidora_performance_monitor_write_out("c:get_tree", "tree constructor");
  }
  if (module_exists('sidora_performance_monitor')) {
    sidora_performance_monitor_start("c:print_tree");
  }
  echo $tree->getTree();
  if (module_exists('sidora_performance_monitor')) {
    sidora_performance_monitor_write_out("c:print_tree", "tree printing");
  }
  // fields: ['id','text', 'link','pid','leaf','children'],
  /* echo  json_encode(array('data' => array('pid' => 'si:root', 'text' => 'si:root (1)', 'expanded' => true,  'children' => array( */
  /*       array('pid' => 'si:org', 'text' => 'si:organizations (2)'), */
  /*       array('pid' => 'si:people', 'text' => 'si:people (2)'), */
  /*     ) */
  /*     )) */
  /* ); */
  if (module_exists('sidora_performance_monitor')) {
    sidora_performance_monitor_write_out("f:content_model_viewer_treemembers", "tree callback");
  }
  exit();
}

function content_model_viewer_treemember($pid) {
  if (module_exists('sidora_performance_monitor'))
    sidora_performance_monitor_start("f:content_model_viewer_treemember");
  module_load_include('inc', 'content_model_viewer', 'Collection');
  module_load_include('inc', 'content_model_viewer', 'Tree');
  $tree = new Tree($pid, $pid . '|||00000');
  $nodeInfo = $tree->getTree();
  $nodeInfo = json_decode($nodeInfo);
  $collection = new Collection($pid);
  list($label, $count) = $collection->getChildCount($pid);
  $count = $count > 0 ? ' (' . $count . ')' : '';
  $nodeInfo->parents = array('label' => $label . $count);

  echo json_encode($nodeInfo);
  if (module_exists('sidora_performance_monitor'))
    sidora_performance_monitor_write_out("f:content_model_viewer_treemember", "tree member callback");
  exit();
}

/**
 * Get/Set data stream properties for the given Fedora Object.
 *
 * @param string $pid
 *   The PID of the Fedora Object, whose data streams this function will get/set.s
 */
function content_model_viewer_datastreams($pid, $dsid = NULL) {
  if (module_exists('sidora_performance_monitor'))
    sidora_performance_monitor_start("f:content_model_viewer_datastreams");
  module_load_include('inc', 'content_model_viewer', 'DatastreamProperties');
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET': {
        $filter = isset($_GET['filter']) ? $_GET['filter'] : FALSE;
        //SFOX Horrible hack to stop MalformedPidException being thrown when $pid = "undefined"
        if (strcmp('undefined', $pid) !== 0) {
          $datastreams = new DatastreamProperties($pid);
          list($data, $total) = $datastreams->get($_GET['start'], $_GET['limit'], $filter);
          echo json_encode(array('success' => TRUE, 'data' => $data, 'total' => $total));
          if (module_exists('sidora_performance_monitor'))
            sidora_performance_monitor_write_out("f:content_model_viewer_datastreams", "datastream callback, GET");
          exit();
        } else {
          exit();
        }
      }
    case 'PUT':
      if ($_SERVER['CONTENT_LENGTH'] > 0) {
        $stdin = fopen("php://input", "r");
        $json = fread($stdin, $_SERVER['CONTENT_LENGTH']);
        $data = json_decode($json);
        $datastreams = new DatastreamProperties($pid);
        $data = $datastreams->setProperties($dsid, $data);
        echo json_encode(array('success' => TRUE, 'msg' => "Successfully modified $dsid's properties", 'data' => $data));
        if (module_exists('sidora_performance_monitor'))
          sidora_performance_monitor_write_out("f:content_model_viewer_datastreams", "datastrem callback, PUT");
        exit();
      }
      break;
  }
}

/**
 * Gets/sets the properties of the object identified by $pid.
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_properties($pid) {
  module_load_include('inc', 'content_model_viewer', 'ObjectProperties');
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
      $object_properties = new ObjectProperties($pid);
      $properties = $object_properties->getProperties();
      echo json_encode(array('success' => TRUE, 'data' => array($properties)));
      exit();
    case 'POST':
      $label = $_POST['label'];
      $owner = $_POST['owner'];
      $object_properties = new ObjectProperties($pid);
      $success = $object_properties->setProperties($label, $owner);
      $message = $success ? t('Successfuly modified object properties') : t('Failed to modify object properties');
      $properties = $object_properties->getProperties();
      echo json_encode(array('success' => TRUE, 'msg' => $message, 'data' => $properties));
      exit();
  }
}

function content_model_viewer_move_object($sources, $recipient, $related_pids_csv) {
  $_SESSION['messages'] = '';
  $suboperations = array();
  $success = true;
  if (strpos($sources, ',') !== FALSE) {
    //In a multi-move, the URL will look something like this:
    //...../viewer/source/si:src123,si:src456/dest/si:1234/move/si:tomove123,si:tomove456
    //where si:src123 is the parent of si:tomove123 and si:src456 is the parent of si:tomove456
    $sourcesArray = explode(',', $sources);
    $toMoveArray = explode(',', $related_pids_csv);
    for ($i = 0; $i < count($sourcesArray); $i++) {
      //ignore anything that is moved to itself (only do things where dest is not current parent
      if ($recipient != $sourcesArray[$i]) {
        $cmvaobl = content_model_viewer_associate_object_business_logic($recipient, $toMoveArray[$i]);
        $suboperations[] = $cmvaobl;
        //$success = $success && $cmvaobl['success']; //See text below, failure still considered success
        //The new associate can be unseccussful if the recipient already exists there, but on Jan 22 / Jan 24, 2014
        //Janet sent emails indicating it should still be removed from other parent
        //TODO: only remove it under the above circumstances instead of always doing it
        if (true) {//($cmvaobl['success']){
          $cmvuobl = content_model_viewer_unassociate_object_business_logic($sourcesArray[$i], $toMoveArray[$i]);
          $success = $success && $cmvuobl['success'];
          $suboperations[] = $cmvuobl;
        }
      }
      else {
        $suboperations[] = array('operation' => 'move', 'success' => true, 'msg' => 'No move needed, source parent and target parent identical', 'recipient' => $recipient, 'payload' => $toMoveArray[$i]);
      }
    }
  }
  else {
    if ($recipient == $sources) {
      $suboperations[] = array('operation' => 'move', 'success' => true, 'msg' => 'No move needed, source parent and target parent identical', 'recipient' => $recipient, 'payload' => $toMoveArray[$i]);
    }
    else {
      $cmvaobl = content_model_viewer_associate_object_business_logic($recipient, $related_pids_csv);
      $suboperations[] = $cmvaobl;
      //The new associate can be unseccussful if the recipient already exists there, but on Jan 22 / Jan 24, 2014
      //Janet sent emails indicating it should still be removed from other parent
      //TODO: only remove it under the above circumstances instead of always doing it
      if (true) {//($cmvaobl['success']){
        $cmvuobl = content_model_viewer_unassociate_object_business_logic($sources, $related_pids_csv);
        $success = /* $cmvaobl['success'] && */ $cmvuobl['success'];
        $suboperations[] = $cmvuobl;
      }
      else {
        $success = false;
      }
    }
  }
  $msgs = array();
  $toReturn = array('operation' => 'move', 'success' => $success, 'msg' => $msgs, 'suboperations' => $suboperations);
  echo json_encode($toReturn);
  exit();
}

function content_model_viewer_associate_object($recipient, $related_pids_csv) {
  $_SESSION['messages'] = '';
  $cmvaobl = content_model_viewer_associate_object_business_logic($recipient, $related_pids_csv);
  echo json_encode($cmvaobl);
  exit();
}

function content_model_viewer_associate_object_business_logic($recipient, $related_pids_csv) {
  $toReturn = array();
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $related_pids = explode(',', $related_pids_csv);
  $msgs = array();
  $success = TRUE;
  $repo = tuque_wrapper_get_repository_instance();
  $description = $repo->api->a->describeRepository();

  $parent = $repo->getObject($recipient);
  foreach ($related_pids as $index => $related) {
    //Do something if there is an error? TBD TODO
    $currmsg = array();
    if (sidora_check_for_relationship($recipient, $related)) {
      $currmsg['success'] = FALSE;
      $currmsg['message'] = t('Relationship between @recipient and @related already exists', array('@recipient' => $recipient, '@related' => $related));
    }
    else {
      $child = $repo->getObject($related);
      $currmsg = sidora_associate_business_logic($repo, $recipient, $related, FALSE);
    }
    $success = $success && $currmsg['success'];
    $msgs[] = $currmsg;
  }
  $toReturn = array('operation' => 'associate', 'success' => $success, 'msg' => $msgs, 'recipient' => $recipient, 'payload' => $related_pids_csv);
  return $toReturn;
}

function content_model_viewer_unassociate_object_business_logic($unassociate_from, $related_pids_csv) {
  $toReturn = array();
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $related_pids = explode(',', $related_pids_csv);
  $msgs = array();
  $success = TRUE;
  $repo = tuque_wrapper_get_repository_instance();
  $description = $repo->api->a->describeRepository();
  $parent = $repo->getObject($unassociate_from);
  foreach ($related_pids as $index => $related) {
    $currmsg = array();
    if (!sidora_check_for_relationship($unassociate_from, $related)) {
      $currmsg['success'] = FALSE;
      $currmsg['message'] = t('Relationship between @uaf and @related does not exist', array('@uaf' => $unassociate_from, '@related' => $related));
    }
    else {
      $child = $repo->getObject($related);
      $currmsg = sidora_unassociate_business_logic($repo, $unassociate_from, $related, FALSE);
    }
    $success = $success && $currmsg['success'];
    $msgs[] = $currmsg;
  }
  $toReturn = array('operation' => 'unassociate', 'success' => $success, 'msg' => $msgs, 'recipient' => $unassociate_from, 'payload' => $related_pids_csv);
  return $toReturn;
}

function content_model_viewer_purge_objects($pids) {
  $_SESSION['messages'] = '';
  $cmvpobl = content_model_viewer_purge_objects_business_logic($pids);
  echo json_encode($cmvpobl);
  exit();
}

function content_model_viewer_purge_objects_business_logic($pids) {
  $toReturn = array();
  $msgs = array();
  $success = TRUE;
  if (!empty($pids)) {
    foreach ($pids as $index => $pid) {
      //Do something if there is an error? TODO
      $currmsg = content_model_viewer_purge_object_choose_exit($pid, FALSE);
      $success = $success && $currmsg['success'];
      $msgs[] = $currmsg;
    }
  }
  $toReturn = array('success' => $success, 'msg' => $msgs);
  return $toReturn;
}

/**
 * Purges the object identified by $pid.
 *
 * The user will be redirected to the sites home page.
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_purge_object($pid) {
  //Decide if this is a multi-delete or not
  //identifiers cannot have commas, so it's a good char to use
  $pids = explode(',', $pid);
  if (count($pids) == 1) {
    content_model_viewer_purge_object_choose_exit($pid, TRUE);
  }
  else {
    content_model_viewer_purge_objects($pids);
  }
}

function content_model_viewer_purge_object_choose_exit($pid, $shouldEchoAndExit) {
  module_load_include('inc', 'sidora', 'includes/utils');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'content_model_viewer', 'ObjectProperties');
  module_load_include('inc', 'islandora_content_model_forms', 'ObjectLinker');

  $active_states = array('A', 'I');
  $properties = new ObjectProperties($pid);
  $state = $properties->state;
  $success = FALSE;

  if (array_search($state, $active_states) !== FALSE) {
    $parents = sidora_get_parents($pid);
    $parent_count = count($parents);

    $repo = tuque_wrapper_get_repository_instance();


    // @todo Remove THIS !!!!!!!! Replace with tuque stuff.o
    try {
      $description = $repo->api->a->describeRepository();
      $object = $repo->getObject($pid);

      $resourcerdfs = sidora_return_fba_resource_rdfs();
      foreach ($resourcerdfs as $key => $keyvalue) {
        $concept = $object->relationships->get(FBA_URI, $keyvalue); //SFox was "hasConcept"
        if ($concept) {
          $children_concepts[] = $concept;
        }
      }
      $conceptrdfs = sidora_return_fba_concept_rdfs();
      foreach ($conceptrdfs as $key => $keyvalue) {
        $resource = $object->relationships->get(FBA_URI, $keyvalue); //SFox was 'hasResource'
        if ($resource) {
          $children_resources[] = $resource;
        }
      }

      $child_count = count($children_concepts) + count($children_resources);

      if ($parent_count == 1 && $child_count == 0) { // All child concepts/resource belong to other concepts
        $is_resource = in_array('si:resourceCModel', $object->models);

        //SFOX
        //$predicate = 'hasConcept';
        $predicate = sidora_get_fba_rdf(key($parents), $pid);
        //if ($is_resource) {
        //$predicate = 'hasResource';
        //}
        sidora_update_relationship(RELS_EXT_URI, $predicate, key($parents), $pid, TRUE);
        //$success = $properties->setState('D'); SFOX removed this, as we want to purge objects, not just mark as deleted.
        /**
         *
         * FBA MODIFICATION BY NBYWELL on 20/10/2014 to process any link-data
         * that was created by the Object Linker functionality. This could
         * be RDFs and entries in the datastreams of linked-to objects. The
         * purge should proceed even if one or more links could not be unwound.
         * A report will run to flag up any hanging links.
         */
        process_links_on_purge($pid);
        $success = islandora_delete_object($object); //SFOX new deletion process
        $message = $success ? t('Successfuly deleted object') : t('Failed to delete object');
      }
      else {
        $message = t('Failed to delete object. You cannot delete an object that is the sole parent of one or more Classes/Data Components.');
      }
    }
    catch (Exception $e) {
      $code = $e->getCode();
      switch ($code) {
        case '404':
          if (!isset($description)) { // Couldn't reach the repository.
            drupal_set_message(t('The Fedora repository server is currently unavailable. Please contact the site administrator.'), 'error', FALSE);
          }
          if ($shouldEchoAndExit)
            drupal_not_found();
          else
            return array('success' => FALSE, 'msg' => 'not_found', 'pid' => $pid);
          break;
        case '401':
        case '403':
          if ($shouldEchoAndExit)
            drupal_access_denied();
          else
            return array('success' => FALSE, 'msg' => 'access_denied', 'pid' => $pid);
          break;
        default:
          drupal_set_message(t('An error occured when attempting to access the fedora repository. Please contact the site administrator.'), 'error', FALSE);
          $message = '%type: !message in %function (line %line of %file).';
          $backtrace = $e->getTrace();
          $caller = $backtrace[1];
          $variables = array(
            '%type' => get_class($e),
            '!message' => check_plain($e->getMessage()),
            '%function' => $caller['function'],
            '%file' => $caller['file'],
            '%line' => $caller['line']
          );
          watchdog('islandora', $message, $variables, WATCHDOG_ERROR, NULL);
          if ($shouldEchoAndExit)
            drupal_not_found();
          else
            return array('success' => FALSE, 'msg' => 'not_found', 'pid' => $pid);
          break;
      }
      if ($shouldEchoAndExit)
        exit();
      else
        return;
    }
  }
  else {
    $message = t('Object does not exist or is in a in-active state.');
  }
  if ($shouldEchoAndExit) {
    echo json_encode(array('success' => $success, 'msg' => $message, 'pid' => $pid));
    exit();
  }
  else {
    return array('success' => $success, 'msg' => $message, 'pid' => $pid);
  }
}

function content_model_viewer_item_information($parent_pid, $child_pids_string, $batch_action = '') {
  if ($batch_action == 'delete') {
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');
    $child_pids = explode(",", $child_pids_string);
    $child_pids_purged = array();
    $child_pids_unassociated = array();
    $success = TRUE;
    $msgs = array();
    foreach ($child_pids as $child_pid) {
      $parents = sidora_get_parents($child_pid);
      if (count($parents) == 1) {
        $true_parent = key($parents);
        if ($true_parent == $parent_pid) {
          $msgs[] = "Should purge this (single parent):$parent_pid object:$child_pid";
          $child_pids_purged[] = $child_pid;
          $currmsg = content_model_viewer_purge_object_choose_exit($child_pid, FALSE);
          $success = $success && $currmsg['success'];
        }
        else {
          //echo "Tried to remove something from not its parent:$parent_pid true_parent:".$true_parent." object:$child_pid\n";
          $msgs[] = "Input child pid:$child_pid is not a child of input parent:$parent_pid";
        }
      }
      else {
        $found_parent = FALSE;
        foreach ($parents as $curr_parent_pid => $curr_parent_name) {
          if ($curr_parent_pid == $parent_pid) {
            $msgs[] = "Should remove from parent:$parent_pid true_parent:" . $curr_parent_pid . " object:$child_pid";
            content_model_viewer_remove_from_collection_choose_exit($child_pid, $parent_pid, TRUE);
            $child_pids_unassociated[] = $child_pid;
            $found_parent = TRUE;
          }
        }
        if (!$found_parent) {
          $msgs[] = "Parent:$parent_pid not found in list of parents for object:$child_pid";
        }
      }
      //var_dump($parents);
    }
    echo json_encode(array('success' => TRUE, 'purged' => $child_pids_purged, 'unassociated' => $child_pids_unassociated, 'messages' => $msgs));

    //$document = new DOMDocument();
    //$document->loadXML($xml);
    //$xpath = new DOMXPath($document);
    //$result = $xpath->query('//*[local-name()="title"]');
    //$title = $result->item(0);
    //$result = $xpath->query('//*[local-name()="identifier"]');
    //$identifier = $result->item(0);
    //$variables['table'] = theme_table(array('Field', 'Value'), array(
    //  array('Title', $title->textContent),
    //  array('Identifier', $identifier->textContent))
    //);
  }
  exit();
}

function content_model_viewer_wizard_codebook_lookup(array &$form) {
  return array(
    // The object that will be related to. Default isn't set via the form state
    // as we want the field to be empty if it fails validation.
    'related' => array(
      '#id' => 'codebook-id',
      '#type' => 'textfield',
      '#title' => t('Use Existing Tabular Data Codebook'),
      '#autocomplete_path' => MENU_CALLBACK_SIDORA_CODEBOOKS,
      '#element_validate' => array('sidora_associate_validate_non_circular'),
      '#description' => t('Type a codebook name to associate with the tabular dataset'),
    ),
  );
}

function content_model_viewer_wizard_step($pid, $type = 'concept') {
  /*
    Decide what is the easiest thing to do...

    Hard code each set of dsid by type:
    Image: MODS
    Tabular: FGDC
    PDF: MODS

    Yes, this is easiest.  So, if it's a Tabular look up FGDC, else look up MODS

    Image:
    is Camera Trap if:
    relatedItem identifier
    originInfo dateOther
    is General if:
    genre
    note


    PDF:
    is Digitized Text if:
    genre
    originInfo dateIssued
    physicalDescription extent
    is Field Book if:
    location shelfLocator

    what's the plan?
    set window.sequentialBatchMetadata = false; when opening the resources tab.

    Open the Resource Overview tab if it's not open
    Check via:
    if (jQuery("button:contains('Resource Overview')").length == 0) {
    ContentModelViewer.functions.selectResource("si:257367");  //Fill with proper ID
    //Auto-swaps to tab
    }else{
    //Swap to the resource overview tab:
    jQuery("button:contains('Resource Overview')").click();
    }
    Indicate we're going to be doing a batch with something like window.sequentialBatchMetadata = true;
    For each resource:
    Get the MODS data and the FGDC data
    If it's MODS data, figure out which type
    Load the metadata form for the resource
    Choose the right form type on the form
    Auto-submit the first form
    Change the Submit button to either "next" or "finish"
    On cancel, window.se.....data = false;
    On resource overview, when loaded, initiate next resource

    What does this look like in code?

    Start the first "edit metadata" section
    Once user completes the first "edit meta" section, start a new one
    So here we have to determine when we can get a hook to knowing the first meta section is complete
    We can hook into the resource overview refresh, which will run the drupal behaviors
    So have a behavior to look into if we are currently running a batch metadata"

   */
  if ($type == 'test') {
    $fs = array();
    $mf = xml_form_builder_get_form($fs, "Research Project", NULL);

    var_dump($mf);
    print 'booya';
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');
    $item = new Fedora_Item("si:257368"); //$pid);
    $keys = array_keys($item->datastreams);
    var_dump($keys);
    $content_model_pid = 'si:fieldbookCModel';
    // $content_model_pid = ContentModel::getPidFromIdentifier($identifier);
    $form_names = islandora_content_model_get_form_names($content_model_pid);
    var_dump($form_names);
    // $item->datastreams[$dsid];
    exit();
  }
  if ($pid == 'codebook') {
    echo drupal_get_form('content_model_viewer_wizard_codebook_lookup');
    exit();
  }
  if ($type == 'wizard_purge') {
    $to_delete = $_SESSION['orig_pid_list'];
    unset($_SESSION['orig_pid_list']);
    content_model_viewer_purge_objects($to_delete);
  }
  $cmodels = content_model_viewer_get_cmodels($pid);
  $id = $type == 'concept' ? 'add-concept-form' : 'add-resource-form';
  $action = $type == 'concept' ? 'ingest-concept' : 'ingest-resource';
  $data = theme('content_model_viewer_metadata_form', $id, $pid, 'wizard-meta');
  //$javascript = array();//drupal_add_js(NULL, NULL, 'header');
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
  unset($settings['ahah']['']);

  $files = array();
  $css_files = array();

  header("Content-type: application/json");
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files, 'refresh' => $refresh));
  exit();
}

function content_model_viewer_add_object($pid, $type = 'concept') { // Ugly hacks!
  $postedCodebookId = $_POST['metadata_form_codebook_id']; //I hate this code, can't wait to rewrite in proper submit - RJA 2014-01-30
  if (!empty($postedCodebookId)) {
    $_SESSION['codebook_id_for_ingest'] = $postedCodebookId;
    //watchdog("BBB_cmw","added codebook-id to session:".$_SESSION['codebook_id_for_ingest'].'---');
  }
  $run_wizard_meta = ($_POST['uploaded_file_dsid'] == 'OBJ' && $_POST['wizard_check'] == TRUE);
  $form_name_test = $_POST['forms'];
  $cmodels = content_model_viewer_get_cmodels($pid);
  $id = $type == 'concept' ? 'add-concept-form' : 'add-resource-form';
  $action = $type == 'concept' ? 'ingest-concept' : 'ingest-resource';
  $data = theme('content_model_viewer_metadata_form', $id, $pid, $action);
  if ($run_wizard_meta) {
    if (!empty($form_name_test)) {
      $_SESSION['content_model_form_name'] = $form_name_test;
    }
    $data = theme('content_model_viewer_metadata_form', $id, $pid, 'wizard-meta'); //goes to content_model_viewer_edit_metadata_wizard_form
  }
  else {
    unset($_SESSION['pid_list']);
    unset($_SESSION['current_pid']);
    unset($_SESSION['content_model_form_name']);
    unset($_SESSION['orig_pid_list']);
    unset($_SESSION['next_pid']);
  }
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = $javascript['setting'];
  if (isset($settings)) {
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
  }
  $js = $javascript['module'];
  $query_string = '?' . substr(variable_get('css_js_query_string', '0'), 0, 1);
  $files = array();
  foreach ($js as $path => $properties) {
    $files[] = base_path() . $path . ($properties['cache'] ? $query_string : '?' . time());
  }
  $css_files = array();
  $css = content_model_viewer_grab_css();
  foreach ($css['all'] as $group) {
    foreach ($group as $path => $bool) {
      $css_files[] = base_path() . $path . $query_string;
    }
  }
  header("Content-type: application/json");
  echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => NULL, 'settings' => $settings, 'js' => $files, 'css' => $css_files, 'refresh' => $refresh));
  exit();
}

function content_model_viewer_remove_from_collection($child_pid, $parent_pid) {
  content_model_viewer_remove_from_collection_choose_exit($child_pid, $parent_pid, FALSE);
}

/**
 *
 */
function content_model_viewer_remove_from_collection_choose_exit($pid, $value, $internal_call) {
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'sidora', 'includes/utils');
  $repo = tuque_wrapper_get_repository_instance();

  try {
    $description = $repo->api->a->describeRepository(); // Check for repository access
    $child = $repo->getObject($pid); // Check for object access
    $is_resource = in_array('si:resourceCModel', $child->models);

    //SFOX
    $parents = sidora_get_parents($pid);
    $predicate = sidora_get_fba_rdf(key($parents), $pid);
    //$predicate = 'hasConcept';
    $recipient = $value;
    $related = $pid;
    //if ($is_resource) {
    //$predicate = 'hasResource';
    //}
    sidora_update_relationship(RELS_EXT_URI, $predicate, $recipient, $related, TRUE);
  }
  catch (Exception $e) {
    if ($internal_call) {
      return FALSE;
    }
    $code = $e->getCode();
    switch ($code) {
      case '404':
        if (!isset($description)) { // Couldn't reach the repository.
          drupal_set_message(t('The Fedora repository server is currently unavailable. Please contact the site administrator.'), 'error', FALSE);
        }
        drupal_not_found();
        break;
      case '401':
      case '403':
        drupal_access_denied();
        break;
      default:
        drupal_set_message(t('An error occured when attempting to access the fedora repository. Please contact the site administrator.'), 'error', FALSE);
        $message = '%type: !message in %function (line %line of %file).';
        $backtrace = $e->getTrace();
        $caller = $backtrace[1];
        $variables = array(
          '%type' => get_class($e),
          '!message' => check_plain($e->getMessage()),
          '%function' => $caller['function'],
          '%file' => $caller['file'],
          '%line' => $caller['line']
        );
        watchdog('islandora', $message, $variables, WATCHDOG_ERROR, NULL);
        drupal_not_found();
        break;
    }
    exit();
  }
  if ($internal_call) {
    return TRUE;
  }
  else {
    echo json_encode(array('success' => TRUE, 'msg' => t('Removed Relationship')));
    exit();
  }
}

/**
 * Adds a datastream to the object identified by $pid.*
 *
 * @param string $pid
 *
 * @return string
 */
function content_model_viewer_add_datastream($pid) {
  $values = $_POST;
  $dsid = $_POST['dsid'];
  $label = $_POST['label'];
  $control = $_POST['control']; // Manage
  $file = array_shift($_FILES);
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $success = false;
  if ($file['error'] == UPLOAD_ERR_OK) {
    try {
      $item = new Fedora_Item($pid);
      if (empty($item->datastreams[$dsid])) {
        module_load_include('inc', 'fedora_repository', 'MimeClass');
        $mimetype_helper = new MimeClass();
        $mime = $mimetype_helper->getType($file['name']);
        $success = $item->add_datastream_from_file($file['tmp_name'], $dsid, $label, $mime, $control);
      }
    }
    catch (Exception $e) {
      // log some error...
    }
  }
  $message = $success ? t('Successfully added datastream.') : t('Failed to add datastream.');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Purges the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_purge_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge_datastream($dsid);
  $message = $success ? t('Successfully purged datastream.') : t('Failed to purge datastream.');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Downloads the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_download_datastream($pid, $dsid) {
  module_load_include('inc', 'content_model_viewer', 'Download');
  download_datastream($pid, $dsid);
}

/**
 * Renders the viewer for the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_view_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  if (isset($item->datastreams[$dsid])) {
    $mime = $item->datastreams[$dsid]['MIMEType'];
    $properties = content_model_viewer_get_viewer_properties($mime);
    if ($properties) {
      module_load_include($properties['type'], $properties['module'], $properties['file']);
      $class = $properties['class'];
      $viewer = new $class();
      echo $viewer->render($pid, $dsid);
      exit();
    }
  }
  echo '<div>' . t('No Viewer Avaliable') . '</div>';
  exit();
}

/**
 * Checks if an object has members.
 *
 * @param string $pid
 *
 * @return boolean
 */
function content_model_viewer_object_has_members($pid) {
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collection = new CollectionClass();
  $results = $collection->getRelatedItems($pid);
  $results = trim($results);
  if ($results != '') {
    $document = new DOMDocument();
    $document->loadXML($results);
    $path = new DOMXPath($document);
    $path->registerNamespace('sparql', 'http://www.w3.org/2001/sw/DataAccess/rf1/result');
    $results = $path->query('//sparql:result');
    $count = $results->length;
    return $count > 0;
  }
  return FALSE;
}

/**
 *
 * @param <type> $pid
 * for this to work an objects cmodel must have a cmodel of islandora:collectionCModel
 */
function content_model_viewer_is_object_collection($pid) {
  $itql_query = 'select $object $title $content from <#ri>
                             where ($object <info:fedora/fedora-system:def/model#label> $title
                             and $object <fedora-model:hasModel> $content
                             and ($content <fedora-model:hasModel> <info:fedora/islandora:collectionCModel>)
                             and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
                             order by $title';
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collection = new CollectionClass();
  $results = $collection->getRelatedItems(NULL, $itql_query);
  $xml = simplexml_load_string($results);
  if (!$xml) {
    drupal_set_message(t('Error getting list of collection objects'), 'error');
    return;
  }
  foreach ($xml->results->result as $result) {
    $a = $result->object->attributes();
    $temp = $a['uri'];
    $object = substr($temp, strrpos($temp, '/') + 1);
    if ($pid === $object) {
      return true;
    }
  }
  return FALSE;
}

/**
 * Checks to see if the content model of the given object is a collection.
 *
 * Checks for the presence of a COLLECTION_POLICY datastream.
 *
 * @param string $pid
 *   The object pid.
 *
 * @return bool
 *   Return TRUE if the object has a collection model.
 */
function content_model_viewer_object_has_collection_model($pid) {
  module_load_include('inc', 'fedora_repository', 'ContentModel');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  if ($item->exists()) {
    if (isset($item->datastreams['COLLECTION_POLICY'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 *
 * @param type $pid
 */
function content_model_viewer_edit_metadata_form(array &$form_state, $pid) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  module_load_include('inc', 'fedora_repository', 'ConnectionHelper');
  $connection_helper = new ConnectionHelper();
  $client = $connection_helper->getSoapClient(variable_get('fedora_soap_url', 'http://localhost:8080/fedora/services/access?wsdl'));
  try {
    $edit_form = new EditObjectMetadataForm();
    $output = $edit_form->create($pid, $client, $form_state);
    $output['which_action'] = array(
      '#type' => 'hidden',
      '#value' => 'edit'
    );
    return $output;
  }
  catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    return array();
  }
}

/**
 * Validate Edit Form.
 *
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_edit_metadata_form_validate(array &$form, array &$form_state) {
  if ($form_state['storage']['step'] == 1) {
    $form_state['storage']['step'] ++;
    $form_state['rebuild'] = TRUE;
  }
  else {
    module_load_include('inc', 'xml_form_api', 'XMLForm');
    $xml_form = new XMLForm($form_state);
    //SFOX need to temporarily turn off the required flags, as the mandatory checks are done as part of publishing
    content_model_viewer_remove_required($form);
    $xml_form->validate($form, $form_state);
  }
}

/**
 * Removes all required fields
 */
function content_model_viewer_remove_required(&$element) {
  //$element['#required'] = FALSE;
  if ($element['#required'] === TRUE) {
    //Need disable required field checking
    $element['#required'] = FALSE;
  }

  foreach (element_children($element) as $key) {
    content_model_viewer_remove_required($element[$key]);
  }
}

function content_model_viewer_edit_metadata_wizard_form_validate(array &$form, array &$form_state) {
  module_load_include('inc', 'xml_form_api', 'XMLForm');
  $xml_form = new XMLForm($form_state);
  $xml_form->validate($form, $form_state);
}

function content_model_viewer_edit_metadata_wizard_form(array &$form_state, $pid) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  module_load_include('inc', 'fedora_repository', 'ConnectionHelper');
  $current_pid = $pid = $_SESSION['current_pid'];
  $last_pid = $_SESSION['last_pid'];
  if (isset($_POST['op'])) {
    $current_pid = $pid = $last_pid;
  }
  $output = NULL;
  if (empty($current_pid) && is_array($_SESSION['pid_list'])) {
    $pulled_pid = array_pop($_SESSION['pid_list']);
    $current_pid = $pid = $pulled_pid;
  }
  if (!empty($current_pid)) {
    $content_model_form_name = $_SESSION['content_model_form_name'];
    $_SESSION['last_pid'] = $current_pid;
    $_SESSION['current_pid'] = '';
    if (empty($content_model_form_name)) {
      $content_model_form_name = 'General Image Description'; //BBB REMOVE
    }
    $form_state['storage']['step'] = '2';
    $form_state['storage']['xml'] = true;
    $form_state['submitted'] = true;
    $form_state['values']['form_id'] = 'content_model_viewer_edit_metadata_form';
    $form_state['values']['op'] = 'Next';
    $form_state['values']['submit'] = 'Next';
    $form_state['values']['which_action'] = 'Edit';
    $form_state['values']['forms'] = $content_model_form_name;
    $form_state['post'] = array();
    $form_state['post']['which_action'] = 'edit';
    $form_state['#submit'][] = 'content_model_viewer_edit_metadata_wizard_form_submit';

    $connection_helper = new ConnectionHelper();
    $client = $connection_helper->getSoapClient(variable_get('fedora_soap_url', 'http://localhost:8080/fedora/services/access?wsdl'));
    try {
      $edit_form = new EditObjectMetadataForm();
      //var_dump($form_state);
      $output = $edit_form->create($pid, $client, $form_state);

      $output['which_action'] = array(
        '#type' => 'hidden',
        '#value' => 'edit'
      );
      $output['wiz_next'] = array(
        '#type' => 'hidden',
        '#value' => $_SESSION['pid_list'][0],
      );
      $output['#action'] = '/viewer/' . $pid . '/metadata_form';
      //var_dump($output);
      unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
    }
    catch (Exception $e) {
      $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
      drupal_set_message($msg, 'error');
      return array();
    }
  }
  if ($_SESSION['wizard_finish']) {
    //unset($_SESSION['pid_list']);
    $_SESSION['wizard_finish'] = false;
    $current_pid = NULL;
    $output = NULL;
  }
  if (empty($current_pid)) {
    $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview";
    $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid']; // Yucky hac
    unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
  }
  if (!empty($output)) {
    return $output;
  }
}

function content_model_viewer_edit_metadata_wizard_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  try {
    $edit_form = new EditObjectMetadataForm();
    $edit_form->submit($form, $form_state);
    $pid = $form_state['values']['pid'];
    if (empty($_SESSION['initial_upload'])) {
      //this edit form s used to batch create the metadata, and do editing we don't want to initially mark the metadata as edited
      sidora_mark_as_metadata_complete($pid);
    }
  }
  catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
  }
  $_SESSION['next_pid'] = $_SESSION['pid_list'][0];
  if (empty($_SESSION['next_pid'])) {
    $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview"; //BBB we'll see
    $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid'];
  }
  else {
    $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/wizard_step/" . $_SESSION['next_pid'];
  }
  unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
}

/**
 * Submit Edit Form.
 *
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_edit_metadata_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  try {
    $edit_form = new EditObjectMetadataForm();
    $edit_form->submit($form, $form_state);
  }
  catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
  }
  $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview";
  $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid']; // Yucky hac
  unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
}

function content_model_viewer_ingest_concept_metadata_form(array &$form_state, $collection_pid) {
  return fedora_repository_ingest_form($form_state, $collection_pid);
}

function content_model_viewer_ingest_concept_metadata_form_validate(array &$form, array &$form_state) {
  fedora_repository_ingest_form_validate($form, $form_state);
}

function content_model_viewer_ingest_concept_metadata_form_submit(array &$form, array &$form_state) {
  $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid']; // Yucky hack
  $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview";
  unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
  // Ingestion is handled by sidora hook urg...
}

function content_model_viewer_ingest_resource_metadata_form(array &$form_state, $collection_pid) {
  return content_model_viewer_ingest_metadata_form($form_state, $collection_pid);
}

function content_model_viewer_ingest_resource_metadata_form_validate(array &$form, array &$form_state) {
  //  content_model_viewer_ingest_metadata_form_validate($form, $form_state);
  if ($_POST['uploaded_file_dsid'] == 'OBJ' && $_POST['wizard_check'] == TRUE) {
    content_model_viewer_edit_metadata_wizard_form_validate($form, $form_state);
  }
  else {
    fedora_repository_ingest_form_validate($form, $form_state);
  }
}

function content_model_viewer_ingest_resource_metadata_form_submit(array &$form, array &$form_state) {
  $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid']; // Yucky hack

  if ($_POST['uploaded_file_dsid'] == 'OBJ' && $_POST['wizard_check'] == TRUE) {
    $form_state['redirect'] = FALSE; //"viewer/{$form_state['values']['pid']}/overview";
  }
  else {
    $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview";
  }
  unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
  // Ingestion is handled by the sidora hook... urg..
}

function content_model_viewer_ingest_metadata_form(array &$form_state, $collection_pid) {
  if (!user_access('ingest new fedora objects')) {
    drupal_set_message(t('You do not have permission to ingest.'), 'error');
    return FALSE;
  }
  module_load_include('inc', 'fedora_repository', 'SecurityClass');
  $security_class = new SecurityClass();
  if (!$security_class->canIngestHere($collection_pid)) {
    // Queries the collection object for a child security datastream and if found parses it
    // to determine if this user is allowed to ingest in this collection
    // we assume if they are able to modify objects in the collection they can ingest as well.
    drupal_set_message(t('You do not have permission to ingest here.'));
    return FALSE;
  }
  if ($collection_pid == NULL) {
    drupal_set_message(t('You must specify an collection object pid to ingest an object.'), 'error');
    return FALSE;
  }
  module_load_include('inc', 'islandora_content_model_forms', 'IngestObjectMetadataForm');
  try {
    $ingest_form = new IngestObjectMetadataForm();
    $output = $ingest_form->create($collection_pid, NULL, $form_state);
    $output['which_action'] = array(
      '#type' => 'hidden',
      '#value' => 'ingest'
    );
    return $output;
  }
  catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    return array();
  }
}

/**
 * Validate Ingest Form.
 *
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_ingest_metadata_form_validate(array &$form, array &$form_state) {
  if ($form_state['storage']['step'] == 1) {
    $form_state['storage']['step'] ++;
    $form_state['rebuild'] = TRUE;
  }
  else {
    if (!empty($_FILES['files']['name']['ingest-file-location'])) {
      $file = file_save_upload('ingest-file-location');
      file_move($file->filepath, 0, 'FILE_EXISTS_RENAME');
      $form_state['values']['ingest-file-location'] = $file->filepath;
    }
    if (isset($form_state['values']['ingest-file-location']) && file_exists($form_state['values']['ingest-file-location'])) {
      module_load_include('inc', 'fedora_repository', 'ContentModel');
      module_load_include('inc', 'fedora_repository', 'MimeClass');
      $file = $form_state['values']['ingest-file-location'];
      $content_model_pid = ContentModel::getPidFromIdentifier($form_state['values']['models']);
      $content_model_pid;
      $content_model_dsid = ContentModel::getDSIDFromIdentifier($form_state['values']['models']);
      if (($content_model = ContentModel::loadFromModel($content_model_pid, $content_model_dsid)) !== FALSE) {
        $allowed_mime_types = $content_model->getMimetypes();
        $mimetype = new MimeClass();
        $format = $mimetype->getType($file);
        if (!empty($file)) {
          if (!in_array($format, $allowed_mime_types)) {
            form_set_error('ingest-file-location', t('The uploaded file\'s mimetype (' . $format . ') is not associated with this Content Model. The allowed types are ' .
                    implode(' ', $allowed_mime_types)));
            file_delete($file);
            return;
          }
          elseif (!$content_model->execIngestRules($file, $format)) {
            drupal_set_message(t('Error following Content Model Rules'), 'error');
            foreach (ContentModel::$errors as $error) {
              drupal_set_message($error, 'error');
            }
          }
        }
      }
    }
    module_load_include('inc', 'xml_form_api', 'XMLForm');
    $xml_form = new XMLForm($form_state);
    $xml_form->validate($form, $form_state);
  }
}

/**
 * Submit Ingest Form.
 *
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_ingest_metadata_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'IngestObjectMetadataForm');
  if ($form_state['storage']['step'] == 2) {
    $ingest_form = new IngestObjectMetadataForm();
    $ingest_form->submit($form, $form_state);

    //TODO we need to remove the default ismemberofcollection relationship and go to a new format of hasConcept or hasResource. This needs to change HACK HACK
    $parent_pid = $form_state['values']['collection_pid'];
    $child_pid = $form_state['values']['pid'];
    $repo = tuque_wrapper_get_repository_instance();
    $parent = $repo->getObject($parent_pid);
    $child = $repo->getObject($child_pid);
    //remove ismember if collection from child
    $child->relationships->remove(RELS_EXT_URI, 'isMemberOfCollection', $parent_pid);

//    $is_imageCModel = in_array('si:imageCModel', $child->models);
//    $is_fieldbookCModel = in_array('si:fieldbookCModel', $child->models);
//    $is_datasetCModel = in_array('si:datasetCModel', $child->models);
    //SFOX
    $predicate = sidora_get_fba_rdf(key($parent), $pid);
    //$predicate = 'hasConcept';
    $model = 'si:conceptCModel';
//    if ($is_imageCModel || $is_fieldbookCModel || $is_datasetCModel) {
    //$predicate = 'hasResource';
//      $model = 'si:resourceCModel';
//    }
    $parent->relationships->add(RELS_EXT_URI, $predicate, $child_pid);

    $child->relationships->add(FEDORA_MODEL_URI, 'hasModel', $model);

    $_SESSION['content_model_viewer_refresh_tree'] = $form_state['values']['pid']; // Yucky hack
  }
  $form_state['redirect'] = "viewer/{$form_state['values']['pid']}/overview";
  unset($_SESSION['messages']); // Don't display drupal messages to the user for this interface.
}

/*
  TODO REMOVE?
 */

class debugUtils {

  public static function callStack($stacktrace) {
    print str_repeat("=", 50) . "\n";
    $i = 1;
    foreach ($stacktrace as $node) {
      print "<br>";
      print "$i. " . basename($node['file']) . ":" . $node['function'] . "(" . $node['line'] . ")\n";
      $i++;
    }
  }

}
